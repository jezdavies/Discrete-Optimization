import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Node {
	private int value;
	private int room;
	private int estimate;
	private List<Integer> itemIDs;
	private boolean active;
	private int itemIndex;
	

	public int getValue() {
		return value;
	}

	public void setValue(int value) {
		this.value = value;
	}

	public int getRoom() {
		return room;
	}

	public void setRoom(int room) {
		this.room = room;
	}

	public int getEstimate() {
		return estimate;
	}

	public void setEstimate(int estimate) {
		this.estimate = estimate;
	}

	public boolean isActive() {
		return active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}
	
	public Node(int valueIn, int roomIn, int estimateIn, int itemIndexIn, List<Integer>itemIDsIn){
		setValue(valueIn);
		setRoom(roomIn);
		setEstimate(estimateIn);
		setItemIndex(itemIndexIn);
		setItemIDs(itemIDsIn);
		setActive(true);
	}
	
	public void addItem(int itemID){
		getItemIDs().add(new Integer(itemID));
	}
	
	public int getLastItemID()
	{
		return getItemIDs().get(getItemIDs().size() -1);
	}

	public int getItemIndex() {
		return itemIndex;
	}

	public void setItemIndex(int itemIndex) {
		this.itemIndex = itemIndex;
	}

	public List<Integer> getItemIDs() {
		return itemIDs;
	}

	public void setItemIDs(List<Integer> itemIDs) {
		this.itemIDs = itemIDs;
	}
	
	public static Comparator<Node> nodeComparator = new Comparator<Node>(){
		public int compare(Node node1, Node node2){
			
			//use descending order
			return node2.getEstimate().compareTo(node1.getEstimate());
		}
	};

}
