import java.util.ArrayList;
import java.util.List;
import java.io.*;


/**
 * The class <code>Solver</code> is an implementation of a greedy algorithm to solve the knapsack problem.
 *
 */
public class Solver {
    
    /**
     * The main class
     */
	
	private int nodeCount;
	private int edgeCount;
	private Edge[] edges;
	private int[] nodes;
	

    public static void main(String[] args) {
        try {
        	Solver solver = new Solver();
        	solver.setup(args);
        	solver.solve();
        	solver.writeOutput();
        	
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    /**
     * Read in the data and create the list of items, capacity and number of item variables.
     */
    private void setup(String[] args) throws IOException{
   
    	
    	//now get the file we're going to parse
        String fileName = null;
        
        // get the temp file name
        for(String arg : args){
            if(arg.startsWith("-file=")){
                fileName = arg.substring(6);
            } 
        }
        if(fileName == null){
            //return;
        	//TODO remove hardcoded file to be used if no parameter passed
        	fileName = "./data/ks_19_0";
        }
        //System.out.println("************FILENAME: " + fileName + " ******************");

        // read the lines out of the file
        List<String> lines = new ArrayList<String>();

        BufferedReader input =  new BufferedReader(new FileReader(fileName));
        try {
            String line = null;
            while (( line = input.readLine()) != null){
                lines.add(line);
            }
        }
        finally {
            input.close();
        }
        
        
        // parse the data in the file
        String[] firstLine = lines.get(0).split("\\s+");
        nodeCount = Integer.parseInt(firstLine[0]);
        edgeCount = Integer.parseInt(firstLine[1]);
        edges = new Edge[edgeCount];
        nodes = new int[nodeCount];
        
        for(int i=1; i < edgeCount+1; i++){
          String line = lines.get(i);
          String[] parts = line.split("\\s+");
          int startNode = Integer.parseInt(parts[0]);
          int endNode = Integer.parseInt(parts[1]);
          edges[i] = new Edge(i, startNode, endNode);

        }
    }
    
    private void solve() throws Exception{
    	
    	/*solver = new GreedyKnapsackSolver();
    	knapsack = solver.solve(items, capacity, itemList);*/
    	
    	
    	//we have three algorithms but not all may work due to memory constraints, so let's try the best first
    	//DynamicProgramming guarantees us the optimum result but can be very memory hungry
    	
    	solver = new DynamicProgrammingKnapsackSolver();
    	knapsack = solver.solve(items, capacity, itemList);  

/*    	solver = new BranchAndBound_DepthFirst_LinearRelaxation_KnapsackSolver();
    	knapsack = solver.solve(items, capacity, itemList);  
*/
/*    	solver = new GreedyKnapsackSolver();
    	knapsack = solver.solve(items, capacity, itemList);  
*/
    	 
    }
    
    private void writeOutput(){
    	
        // prepare the solution in the specified output format
        System.out.println(knapsack.getValue() +" 0");
        for(Item i : itemList){
        	if(knapsack.containsItem(i)){
        		System.out.print("1 ");
        	}else{
        		System.out.print("0 ");
        	}
        }      
    }
}