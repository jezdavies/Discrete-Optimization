import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class Graph {
	private List<Edge> edges;
	private List<Vertice> vertices;	
	private List<Integer> colours;

	public Graph(List<Vertice> verticesIn, List<Edge>  edgesIn, List<Integer> coloursIn) {
		edges = edgesIn;
		vertices = verticesIn;
		colours = coloursIn;
	}

	public List<Edge>  getEdges() {
		return edges;
	}

	public void setEdges(List<Edge>  edges) {
		this.edges = edges;
	}

	public List<Vertice> getVertices() {
		return vertices;
	}

	public void setVertices(List<Vertice> vertices) {
		this.vertices = vertices;
	}

	public List<Integer> getColours() {
		return colours;
	}

	public void setColours(List<Integer> colours) {
		this.colours = colours;
	}

	public int getVerticeCount() {
		return getVertices().size();
	}

	public int getEdgeCount() {
		return getEdges().size();
	}


	public int getColourCount() {
		return getColours().size();
	}
	
	public void sortVerticesByDescendingNumberUncolouredNeighbours(){
		Collections.sort(vertices, Vertice.descendingNumberUncolouredNeighboursComparator);
	}
	public void sortVerticesByDescendingNumberNeighbours(){
		Collections.sort(vertices, Vertice.descendingNumberNeighboursComparator);
	}
	
	public void sortVerticesByAscendingId()
	{
		Collections.sort(vertices, Vertice.ascendingIDComparator);
	}
	
	public Vertice getVerticeByIndex(int verticeIndex){
		return vertices.get(verticeIndex);
	}
	
	public void setVerticeByIndex(int verticeIndex, Vertice verticeIn){
		vertices.set(verticeIndex, verticeIn);
	}
	
	public int getIndexOfTopUncolouredVertice(){
		int index = 0;
		for(int i = 0; i < vertices.size(); i++){
			if(!vertices.get(i).isColoured()){
				index = i;
				break;
			}
		}
		return index;
	}

	public void updateVerticesWithNeighbourNewColour(Set<Integer> verticeIDsToUpdate, Integer neighbourColour) {
		for(Vertice v:vertices){
			if(verticeIDsToUpdate.contains(new Integer(v.getId()))){
				v.addNeighbourColour(neighbourColour);
				v.setNumberOfUncolouredNeighbours(v.getNumberOfUncolouredNeighbours() - 1);
			}
		}
		
	}
	
	public List<Integer> getColoursNotUsedByVerticeNeighbours(int verticeIndex){
		List<Integer> availableColours = new ArrayList<Integer>();
		
		Set<Integer> neighbourColours = vertices.get(verticeIndex).getNeighbourColours();
		//if the number of neighbour colours is less than the number of colours in the graph then there is one that can be used
		if(neighbourColours.size() < getColourCount()){				
			for(Integer c: getColours()){
				if(!neighbourColours.contains(c)){
					//we found a colour in the list of existing colours for the graph that isn't already assigned to a neighbour of this vertice
					//so set the colour of the vertice
					availableColours.add(c);
				}
			}
		}
		return availableColours;
	}
	
	public int addNewColourToGraph()
	{
		int newMaxColour = colours.size();
		colours.add(newMaxColour);
		return newMaxColour;
	}
	
	public String toString(){
		String output = "";
		
    	output += "Edges:\n";
    	for(Edge e:getEdges()){
    		output +=e;
    	}
    	output +="Vertices:\n";
    	for(Vertice v:getVertices()){
    		output +=v;
    	}
    	output +="Colours:\n";
    	for(Integer c:getColours()){
    		output +=c + " ";
    	}
    	output += "\n";
    	
    	return output;
	}



	/**
	 * @param topUncolouredVerticeIndex
	 * @return returns -1 if no free colour to change to, else returns the number of the colour that is now freed up
	 */
	public int changeVerticeColourToAnotherAvailableColour(
			int verticeIndex) {
		int oldColour = -1;
		Vertice vertice = vertices.get(verticeIndex);
		//for each neighbour of the vertice see if it can take more than just the one colour it has at the moment
		Set<Integer> neighbourIDs = vertice.getNeighbourIDs();
		List<Integer>descendingDegreeNeighbourIDs = orderSubsetOfVerticeIDsByVerticeDegree(neighbourIDs);
		for(Integer i:neighbourIDs){
			//get the set of neighbour colours for this vertice
			Set<Integer> usedColours = vertice.getNeighbourColours();
			//if the number of neighbour colours is less than the number of colours in the graph -1
			//then there is another spare colour it could take
			//so change the colour to that one
			if(usedColours.size() < (colours.size() - 1)){
				oldColour = vertice.getColour();
				//add in the current colour to the set of used colours
				usedColours.add(new Integer(oldColour));
				//get the list of all colours and then remove those that have been used
				List<Integer> potentialColours = colours;
				potentialColours.removeAll(usedColours);
				//update the vertice to have one of the other free colours
				//N.B. don't use the local vertice variable that we've pulled out for convenience, use the one in the collection
				this.updateVerticeColour(verticeIndex, oldColour, potentialColours.get(0));
				//now jump out of the loop as we've achieved our goal
				break;
			}
			
		}
		
		return oldColour;
	}

	private List<Integer> orderSubsetOfVerticeIDsByVerticeDegree(
			Set<Integer> verticeIDs) {
		//we're going to order the set of ids by the degree (number of connections) of the vertice it represents
		List<Integer> orderedVerticeIDs = new ArrayList<Integer>();
		//get the set of all vertices and order them by their ID so we can pull them out of the list using their index
		List<Vertice> allVerticesOrderedByID = vertices;
		Collections.sort(allVerticesOrderedByID, Vertice.ascendingIDComparator);
		//now let's get the set of vertices that the IDs represent
		List<Vertice> orderedVertices = new ArrayList<Vertice>();
		for(Integer i:verticeIDs){
			orderedVertices.add(allVerticesOrderedByID.get(i));
		}
		//now let's sort the list of vertices by their degree
		Collections.sort(orderedVertices, Vertice.descendingNumberNeighboursComparator);
		//now put the IDs into the list in that order and return them
		for(Vertice v:orderedVertices){
			orderedVerticeIDs.add(v.getId());
		}

		return orderedVerticeIDs;
	}

	public void setVerticeColour(int verticeIndex,
			int verticeColour) {
		//set the colour of the vertice as requested and then update it's neighbours so they know it's colour
		vertices.get(verticeIndex).setColour(verticeColour);
		updateVerticesWithNeighbourNewColour(vertices.get(verticeIndex).getNeighbourIDs(), verticeColour);
	}
	
	private void updateVerticeColour(int verticeIndex, int oldColour,
			Integer newColour) {
		//set the colour of the vertice as requested and then update it's neighbours so they know it's colour
		vertices.get(verticeIndex).setColour(newColour);
		//now get it's neighbours to update their list of neighbour colours
		Set<Integer> verticeNeighbourIDs = vertices.get(verticeIndex).getNeighbourIDs();
		for(Integer neighbourID: verticeNeighbourIDs){
			refreshNeighbourColours(neighbourID);
		}		
	}

	private void refreshNeighbourColours(int verticeIndex) {
		Set<Integer> newNeighbourColours = new HashSet<Integer>();
		Set<Integer> neighbourIDs = vertices.get(verticeIndex).getNeighbourIDs();
		int countOfUncolouredNeighbours = 0;
		for(Integer neighbourID: neighbourIDs){
			if(vertices.get(neighbourID).isColoured()){
				newNeighbourColours.add(vertices.get(neighbourID).getColour());
			} else {
				countOfUncolouredNeighbours += 1;
			}			
		}
		vertices.get(verticeIndex).setNeighbourColours(newNeighbourColours);
		vertices.get(verticeIndex).setNumberOfUncolouredNeighbours(countOfUncolouredNeighbours);		
	}
	
	


	
}