import java.util.Collections;
import java.util.List;


public class GreedyGraphAlgorithm {
	private Graph graph;
	public Graph solverGraph(Graph graphIn){
		graph = graphIn;
		//repeat the following for every vertice in the graph
		for(int i = 0; i < graph.getVerticeCount() - 1; i++){
			//order the vertices by their number of uncoloured neighbours
			graph.sortVerticesByDescendingNumberUncolouredNeighbours();
			//assign the most connected vertice the first colour that isn't used by one of it's neighbours
			int topUncolouredVerticeIndex = graph.getIndexOfTopUncolouredVertice();
			Vertice topUncolouredVertice = graph.getVerticeByIndex(topUncolouredVerticeIndex);
			Set<Integer> neighbourColours = topUncolouredVertice.getNeighbourColours();
			boolean colourAssigned = false;
			for(Integer c: graph.getColours()){
				if(!neighbourColours.contains(c)){
					//we found a colour in the list of existing colours for the graph that isn't already assigned to a neighbour of this vertice
					topUncolouredVertice.setColour(c);
					//add the vertice back into the graph
					graph.setVerticeByIndex(topUncolouredVerticeIndex, topUncolouredVertice);
					//update each of the vertice's neighbours to show it now has a neighbour with this colour
					graph.updateVerticeNeighboursWithNeighbourColour()
					
					colourAssigned = true;
				}
			}
			//TODO complete greedy algorithm
		}
		
	}
}
