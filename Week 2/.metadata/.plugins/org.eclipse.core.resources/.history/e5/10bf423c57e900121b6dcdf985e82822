import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class Graph {
	private List<Edge> edges;
	private List<Vertice> vertices;	
	private List<Integer> colours;

	public Graph(List<Vertice> verticesIn, List<Edge>  edgesIn, List<Integer> coloursIn) {
		edges = edgesIn;
		vertices = verticesIn;
		colours = coloursIn;
	}

	public List<Edge>  getEdges() {
		return edges;
	}

	public void setEdges(List<Edge>  edges) {
		this.edges = edges;
	}

	public List<Vertice> getVertices() {
		return vertices;
	}

	public void setVertices(List<Vertice> vertices) {
		this.vertices = vertices;
	}

	public List<Integer> getColours() {
		return colours;
	}

	public void setColours(List<Integer> colours) {
		this.colours = colours;
	}

	public int getVerticeCount() {
		return getVertices().size();
	}

	public int getEdgeCount() {
		return getEdges().size();
	}


	public int getColourCount() {
		return getColours().size();
	}
	
	public void sortVerticesByDescendingNumberUncolouredNeighbours(){
		Collections.sort(vertices, Vertice.descendingNumberUncolouredNeighboursComparator);
	}
	public void sortVerticesByDescendingNumberNeighbours(){
		Collections.sort(vertices, Vertice.descendingNumberNeighboursComparator);
	}
	
	public void sortVerticesByAscendingId()
	{
		Collections.sort(vertices, Vertice.ascendingIDComparator);
	}
	
	public Vertice getVerticeByIndex(int verticeIndex){
		return vertices.get(verticeIndex);
	}
	
	public void setVerticeByIndex(int verticeIndex, Vertice verticeIn){
		vertices.set(verticeIndex, verticeIn);
	}
	
	public int getIndexOfTopUncolouredVertice(){
		int index = 0;
		for(int i = 0; i < vertices.size(); i++){
			if(!vertices.get(i).isColoured()){
				index = i;
				break;
			}
		}
		return index;
	}

	//removed method and just refreshing the neighbour colours by looping through neighbours and calling refreshNeighbourColours
/*	public void updateVerticesWithNeighbourNewColour(Set<Integer> verticeIDsToUpdate, Integer neighbourColour) {
		for(Vertice v:vertices){
			if(verticeIDsToUpdate.contains(new Integer(v.getId()))){
				v.addNeighbourColour(neighbourColour);
				v.setNumberOfUncolouredNeighbours(v.getNumberOfUncolouredNeighbours() - 1);
			}
		}
		
	}*/
	

	
	public int addNewColourToGraph()
	{
		int newMaxColour = colours.size();
		colours.add(newMaxColour);
		return newMaxColour;
	}
	
	public String toString(){
		String output = "";
		
    	output += "Edges:\n";
    	for(Edge e:getEdges()){
    		output +=e;
    	}
    	output +="Vertices:\n";
    	for(Vertice v:getVertices()){
    		output +=v;
    	}
    	output +="Colours:\n";
    	for(Integer c:getColours()){
    		output +=c + " ";
    	}
    	output += "\n";
    	
    	return output;
	}

/*	public List<Integer> getColoursNotUsedByVerticeNeighbours(int verticeIndex){
		List<Integer> availableColours = new ArrayList<Integer>();
		
		Set<Integer> neighbourColours = vertices.get(verticeIndex).getNeighbourColours();
		//if the number of neighbour colours is less than the number of colours in the graph then there is one that can be used
		if(neighbourColours.size() < getColourCount()){				
			for(Integer c: getColours()){
				if(!neighbourColours.contains(c)){
					//we found a colour in the list of existing colours for the graph that isn't already assigned to a neighbour of this vertice
					//so set the colour of the vertice
					availableColours.add(c);
				}
			}
		}
		return availableColours;
	}*/
	
	//alternate implementation of this method (original above) as wasn't getting correct result for remaining free colours
	public List<Integer> getColoursNotUsedByVerticeNeighbours(int verticeIndex){
		List<Integer> availableColours = new ArrayList<Integer>();
		Vertice vertice = vertices.get(verticeIndex);
		Set<Integer> neighbourColours = vertice.getNeighbourColours();
		//if the number of neighbour colours is less than the number of colours in the graph then there is one that can be used
		if(neighbourColours.size() < getColourCount()){				
			//get the list of all colours and then remove those that have been used
			availableColours.addAll(colours);
			availableColours.removeAll(neighbourColours);
		}
		return availableColours;
	}
	
	

	/**
	 * @param topUncolouredVerticeIndex
	 * @return returns -1 if no free colour to change to, else returns the number of the colour that is now freed up
	 */
	public int changeVerticeColourToAnotherAvailableColour(
			int verticeID) {
		int oldColour = -1;
		
		System.out.println("changeVerticeColourToAnotherAvailableColour called for verticeID: " + verticeID);
				
		//get the set of neighbourIDs for the vertice
		Vertice vertice = vertices.get(verticeID);
		Set<Integer> neighbourIDs = vertice.getNeighbourIDs();
		
		System.out.println("NeighbourIDs:" + neighbourIDs);
		
		for(Integer i:neighbourIDs){
			Integer verticeCurrentColour = new Integer(vertices.get(i).getColour());
			System.out.println("Examining neighbour ID: " + i);
			System.out.println("Current colour is: " + verticeCurrentColour);
			
			//get the set of neighbour colours for this neighbour of the target vertice
			List<Integer> availableColours = getColoursNotUsedByVerticeNeighbours(i);
			
			System.out.println("colours not used by neighbours: " + availableColours);
			
			//remove the current colour of the vertice as we want to free it up to be used by another vertice
			availableColours.remove(currentColour);
			//if the number of available colours is greater than zero then we can make a switch
			//so change the colour to that one
			if(availableColours.size() > 0){
				
				System.out.println("availableColours.size = " + availableColours.size());
				System.out.println("availableColours are:");
				for(Integer colour: availableColours){
					System.out.println(colour + " ");
				}
				
				oldColour = vertices.get(i).getColour();
				
				System.out.println("oldColour set to " + oldColour);
				
				//update the vertice to have one of the other free colours
				//N.B. don't use the local vertice variable that we've pulled out for convenience, use the one in the collection
				System.out.println("calling updateVerticeColour with verticeID=" + i + ", newverticeColour=" + availableColours.get(0));
				updateVerticeColour(i, availableColours.get(0));
				//now jump out of the loop as we've achieved our goal
				System.out.println("We found a free colour: " + availableColours.get(0) + " and free up colour: " + oldColour + 
									"so Finished examining neighbour ID: " + i + " and exiting loop");
				System.out.println("-----------------------------------------------------------------------");
				break;
			} else {
 				
				System.out.println("There were no available colours so finished examining neighbour ID: " + i);
				System.out.println("-----------------------------------------------------------------------");
			}
		}
		
		return oldColour;
	}

	//below method remove as using updateVerticColour instead as updateVerticesWithNeighbourNewColour was unreliable
	/*
			int verticeColour) {
		//set the colour of the vertice as requested and then update it's neighbours so they know it's colour
		vertices.get(verticeID).setColour(verticeColour);
		updateVerticesWithNeighbourNewColour(vertices.get(verticeID).getNeighbourIDs(), verticeColour);
	}*/
	
	public void updateVerticeColour(int verticeID, Integer newVerticeColour) {
		//set the colour of the vertice as requested and then update it's neighbours so they know it's colour
		vertices.get(verticeID).setColour(newVerticeColour);
		//now get it's neighbours to update their list of neighbour colours
		Set<Integer> verticeNeighbourIDs = vertices.get(verticeID).getNeighbourIDs();
		for(Integer neighbourID: verticeNeighbourIDs){
			refreshNeighbourColours(neighbourID);
		}		
	}

	private void refreshNeighbourColours(int verticeID) {
		Set<Integer> newNeighbourColours = new HashSet<Integer>();
		Set<Integer> neighbourIDs = vertices.get(verticeID).getNeighbourIDs();
		int countOfUncolouredNeighbours = 0;
		for(Integer neighbourID: neighbourIDs){
			if(vertices.get(neighbourID).isColoured()){
				newNeighbourColours.add(vertices.get(neighbourID).getColour());
			} else {
				countOfUncolouredNeighbours += 1;
			}			
		}
		vertices.get(verticeID).setNeighbourColours(newNeighbourColours);
		vertices.get(verticeID).setNumberOfUncolouredNeighbours(countOfUncolouredNeighbours);		
	}
	
	


	
}